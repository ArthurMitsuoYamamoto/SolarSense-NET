# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  webAppName: 'SolarSense'
  resourceGroup: 'GS_SOLARSENSE'
  slotName: 'production'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'


# 3. Construir o projeto com o Visual Studio
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:DeployOnBuild=true /p:Configuration=$(buildConfiguration)'

# 4. Publicar o projeto .NET (gerar o pacote .zip)
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)\drop'

# 5. Publicar artefato para o pipeline
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\drop'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# 6. Verificação e listagem dos artefatos
- script: |
    if exist "$(Build.ArtifactStagingDirectory)\drop\*" (
        echo "Artefatos encontrados no diretório:"
        dir "$(Build.ArtifactStagingDirectory)\drop\*"
    ) else (
        echo "Nenhum artefato encontrado no diretório especificado."
        exit 1
    )
  displayName: 'Verificar e listar arquivos'


- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'


- task: VSTest@3
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\bin\**\*test.dll
      **\bin\**\*tests.dll
    searchFolder: '$(System.DefaultWorkingDirectory)'

# 7. Deploy do pacote no Azure App Service
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Enzo Lafer RM551111(8b3c71f1-34e5-4ca5-adde-1783ea3a7d68)'
    appType: 'webApp'
    appName: 'SolarSense'
    deployToSlotOrASE: true
    package: '$(Build.ArtifactStagingDirectory)\drop\*.zip'
    deploymentMethod: 'auto'
    resourceGroupName: 'GS_SOLARSENSE'
    slotName: 'production'
    





